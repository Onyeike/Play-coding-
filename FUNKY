import pygame
import random

pygame.init()

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 165, 0)
PURPLE = (128, 0, 128)

WINDOW_WIDTH = 400
WINDOW_HEIGHT = 500

TILE_SIZE = 50
TILE_SPACING = 10

GRID_ROWS = 8
GRID_COLS = 8

GRID_WIDTH = GRID_COLS * (TILE_SIZE + TILE_SPACING)
GRID_HEIGHT = GRID_ROWS * (TILE_SIZE + TILE_SPACING)

GRID_X = (WINDOW_WIDTH - GRID_WIDTH) // 2
GRID_Y = 100

COLORS = [RED, GREEN, BLUE, YELLOW, ORANGE, PURPLE]

window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("FUNKY")

def create_grid():
    grid = []
    for _ in range(GRID_ROWS):
        row = [random.choice(COLORS) for _ in range(GRID_COLS)]
        grid.append(row)
    return grid
def draw_grid(grid):
    for row in range(GRID_ROWS):
        for col in range(GRID_COLS):
            tile_x = GRID_X + col * (TILE_SIZE + TILE_SPACING)
            tile_y = GRID_Y + row * (TILE_SIZE + TILE_SPACING)
            tile_color = grid[row][col]
            pygame.draw.rect(window, tile_color, (tile_x, tile_y, TILE_SIZE, TILE_SIZE))

def select_tile(mouse_x, mouse_y):
    col = (mouse_x - GRID_X) // (TILE_SIZE + TILE_SPACING)
    row = (mouse_y - GRID_Y) // (TILE_SIZE + TILE_SPACING)
    return row, col
def swap_tiles(grid, row1, col1, row2, col2):
    grid[row1][col1], grid[row2][col2] = grid[row2][col2], grid[row1][col1]

def check_matches(grid):
    matches = []
    for row in range(GRID_ROWS):
        for col in range(GRID_COLS):
            color = grid[row][col]
            if col < GRID_COLS - 2 and grid[row][col + 1] == color and grid[row][col + 2] == color:
                matches.append((row, col))
            if row < GRID_ROWS - 2 and grid[row + 1][col] == color and grid[row + 2][col] == color:
                matches.append((row, col))


def remove_matched_tiles(grid, matches):
    for match in matches:
        row, col = match
        grid[row][col] = None

def shift_tiles(grid):
    for col in range(GRID_COLS):
        empty_cells = [row for row in range(GRID_ROWS) if grid[row][col] is None]
        for row in range(GRID_ROWS - 1, -1, -1):
            if row in empty_cells:
                grid[row][col] = random.choice(COLORS)
                empty_cells.remove(row)

def update_game(grid):
    matches = check_matches(grid)
    while matches:
        remove_matched_tiles(grid, matches)
        shift_tiles(grid)
        matches = check_matches(grid)


def game_loop():
    grid = create_grid()
    selected_tile = None

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                if GRID_X <= mouse_x <= GRID_X + GRID_WIDTH and GRID_Y <= mouse_y <= GRID_Y + GRID_HEIGHT:
                    row, col = select_tile(mouse_x, mouse_y)
                    if selected_tile is None:
                        selected_tile = (row, col)
                    else:
                        if abs(selected_tile[0] - row) + abs(selected_tile[1] - col) == 1:
                            swap_tiles(grid, selected_tile[0], selected_tile[1], row, col)
                            update_game(grid)
                        selected_tile = None

        window.fill(BLACK)
        draw_grid(grid)
        pygame.display.update()

    pygame.quit()


game_loop()


